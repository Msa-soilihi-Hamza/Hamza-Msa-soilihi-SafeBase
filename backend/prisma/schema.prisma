// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  phone     String?
  role      UserRole @default(USER)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  databases Database[]
  logs      Log[]

  @@map("users")
}

model Database {
  id           String       @id @default(cuid())
  name         String
  type         DatabaseType
  host         String
  port         Int
  username     String
  password     String
  databaseName String
  description  String?
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  backups Backup[]
  logs    Log[]

  @@map("databases")
}

model Backup {
  id            String       @id @default(cuid())
  version       String
  filePath      String
  fileSize      BigInt
  status        BackupStatus @default(PENDING)
  startedAt     DateTime     @default(now())
  completedAt   DateTime?
  errorMessage  String?      @db.Text
  backupType    BackupType   @default(MANUAL)
  retentionDays Int?
  compressed    Boolean      @default(false)
  checksum      String?

  databaseId String
  database   Database @relation(fields: [databaseId], references: [id], onDelete: Cascade)

  @@map("backups")
}

model Log {
  id        String   @id @default(cuid())
  level     LogLevel
  message   String   @db.Text
  action    String?
  metadata  Json?
  createdAt DateTime @default(now())

  userId     String?
  user       User?     @relation(fields: [userId], references: [id], onDelete: SetNull)
  databaseId String?
  database   Database? @relation(fields: [databaseId], references: [id], onDelete: SetNull)

  @@index([level])
  @@index([createdAt])
  @@map("logs")
}

enum UserRole {
  ADMIN
  USER
}

enum DatabaseType {
  MYSQL
  POSTGRESQL
  MONGODB
}

enum BackupStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  FAILED
}

enum BackupType {
  MANUAL
  SCHEDULED
  AUTOMATIC
}

enum LogLevel {
  INFO
  WARNING
  ERROR
  CRITICAL
}
